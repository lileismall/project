!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Acceptor	Acceptor.cc	/^Acceptor::Acceptor(const string & ip, unsigned short port)$/;"	f	class:ll::Acceptor
Acceptor	Acceptor.cc	/^Acceptor::Acceptor(unsigned short port)$/;"	f	class:ll::Acceptor
Acceptor	Acceptor.h	/^class Acceptor$/;"	c	namespace:ll
CXX	Makefile	/^CXX:=g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS:= -w -g  $(addprefix -I, $(INC_DIR)) $(LIBS) $/;"	m
CacheManager	LRUCache.h	/^class CacheManager$/;"	c	namespace:ll
CacheManager	temp/LRUCache.h	/^class CacheManager$/;"	c	namespace:ll
CacheNode	LRUCache.h	/^		CacheNode(string s, int indexx)$/;"	f	struct:ll::LRUCache::CacheNode
CacheNode	LRUCache.h	/^	struct CacheNode$/;"	s	class:ll::LRUCache
CacheNode	temp/LRUCache.h	/^		CacheNode(string s, int indexx)$/;"	f	struct:ll::LRUCache::CacheNode
CacheNode	temp/LRUCache.h	/^	struct CacheNode$/;"	s	class:ll::LRUCache
Condition	Condition.cc	/^Condition::Condition(MutexLock & mutex)$/;"	f	class:ll::Condition
Condition	Condition.h	/^class Condition$/;"	c	namespace:ll
Configuration	Configuration.h	/^    Configuration(const string &filepath)$/;"	f	class:ll::Configuration
Configuration	Configuration.h	/^class Configuration$/;"	c	namespace:ll
CppJieba	SplitTool.h	/^    CppJieba()$/;"	f	class:ll::CppJieba
CppJieba	SplitTool.h	/^class CppJieba$/;"	c	namespace:ll
DictProducer	DictProducer.cc	/^DictProducer::DictProducer(Configuration &conf)$/;"	f	class:ll::DictProducer
DictProducer	DictProducer.h	/^class DictProducer$/;"	c	namespace:ll
DictProducer	temp/DictProducer.cc	/^DictProducer::DictProducer(Configuration &conf)$/;"	f	class:ll::DictProducer
DictProducer	temp/DictProducer.h	/^class DictProducer$/;"	c	namespace:ll
ERR_EXIT	server.c	11;"	d	file:
EXE	Makefile	/^EXE:=.\/aproject.exe$/;"	m
EchoServer	testThread.cc	/^    EchoServer(int i,int j,string str,int n)$/;"	f	class:ll::EchoServer
EchoServer	testThread.cc	/^class EchoServer$/;"	c	namespace:ll	file:
EditDis	nBtyte.cc	/^int EditDis(string a,string b)$/;"	f	namespace:ll
EditDis	temp/nBtyte.cc	/^int EditDis(string a,string b)$/;"	f	namespace:ll
EventLoop	EventLoop.cc	/^EventLoop::EventLoop(Acceptor & acceptor)$/;"	f	class:ll::EventLoop
EventLoop	EventLoop.h	/^class EventLoop$/;"	c	namespace:ll
INC_DIR	Makefile	/^INC_DIR:= .\/$/;"	m
INF	nBtyte.cc	5;"	d	file:
INF	nBtyte.h	8;"	d
INF	temp/nBtyte.cc	5;"	d	file:
INF	temp/nBtyte.h	8;"	d
InetAddress	InetAddress.cc	/^InetAddress::InetAddress(const string & ip, unsigned short port)$/;"	f	class:ll::InetAddress
InetAddress	InetAddress.cc	/^InetAddress::InetAddress(const struct sockaddr_in & addr)$/;"	f	class:ll::InetAddress
InetAddress	InetAddress.cc	/^InetAddress::InetAddress(unsigned short port)$/;"	f	class:ll::InetAddress
InetAddress	InetAddress.h	/^class InetAddress$/;"	c	namespace:ll
InitConfigMap	Configuration.h	/^    void InitConfigMap()$/;"	f	class:ll::Configuration
LIBS	Makefile	/^LIBS:= -lpthread -lhiredis -ljsoncpp$/;"	m
LRUCache	LRUCache.h	/^	LRUCache(int capacity = 10)$/;"	f	class:ll::LRUCache
LRUCache	LRUCache.h	/^class LRUCache$/;"	c	namespace:ll
LRUCache	temp/LRUCache.h	/^	LRUCache(int capacity = 10)$/;"	f	class:ll::LRUCache
LRUCache	temp/LRUCache.h	/^class LRUCache$/;"	c	namespace:ll
MAXEVENTS	server.c	16;"	d	file:
MutexLock	MutexLock.cc	/^MutexLock::MutexLock()$/;"	f	class:ll::MutexLock
MutexLock	MutexLock.h	/^class MutexLock$/;"	c	namespace:ll
MutexLockGuard	MutexLock.h	/^	MutexLockGuard(MutexLock & mutex)$/;"	f	class:ll::MutexLockGuard
MutexLockGuard	MutexLock.h	/^class MutexLockGuard$/;"	c	namespace:ll
MyResult	testThread.cc	/^typedef struct MyResult$/;"	s	namespace:ll	file:
Noncopyable	Noncopyable.h	/^	Noncopyable() {}$/;"	f	class:ll::Noncopyable
Noncopyable	Noncopyable.h	/^class Noncopyable$/;"	c	namespace:ll
OBJS	Makefile	/^OBJS:= $(patsubst %.cc, %.o, $(SRCS))$/;"	m
PageLibPreprocessor	PageLibPreprocessor.h	/^    PageLibPreprocessor(Configuration &conf)$/;"	f	class:ll::PageLibPreprocessor
PageLibPreprocessor	PageLibPreprocessor.h	/^class PageLibPreprocessor$/;"	c	namespace:ll
RedisConfig	RedisConfig.h	/^    RedisConfig() {}$/;"	f	class:ll::RedisConfig
RedisConfig	RedisConfig.h	/^class RedisConfig$/;"	c	namespace:ll
RedisTool	RedisTool.cc	/^RedisTool::RedisTool()$/;"	f	class:ll::RedisTool
RedisTool	RedisTool.h	/^class RedisTool$/;"	c	namespace:ll
SRCS	Makefile	/^SRCS:=$(wildcard *.cc)$/;"	m
SRC_DIR	Makefile	/^SRC_DIR:= .\/$/;"	m
SUMMARYNUM	PageLibPreprocessor.cc	13;"	d	file:
SimilarityCompare	WordQuery.cc	/^    SimilarityCompare(vector<double> & base)$/;"	f	struct:ll::SimilarityCompare
SimilarityCompare	WordQuery.cc	/^struct SimilarityCompare$/;"	s	namespace:ll	file:
Socket	Socket.cc	/^Socket::Socket()$/;"	f	class:ll::Socket
Socket	Socket.cc	/^Socket::Socket(int fd)$/;"	f	class:ll::Socket
Socket	Socket.h	/^class Socket$/;"	c	namespace:ll
SocketIO	SocketIO.cc	/^SocketIO::SocketIO(int fd)$/;"	f	class:ll::SocketIO
SocketIO	SocketIO.h	/^class SocketIO$/;"	c	namespace:ll
SplitTool	SplitTool.h	/^    SplitTool() {}$/;"	f	class:ll::SplitTool
SplitTool	SplitTool.h	/^class SplitTool$/;"	c	namespace:ll
TOPK_NUMBER	PageLibPreprocessor.h	/^    const static int TOPK_NUMBER = 20;  $/;"	m	class:ll::WebPage
TaskQueue	TaskQueue.cc	/^TaskQueue::TaskQueue(size_t sz)$/;"	f	class:ll::TaskQueue
TaskQueue	TaskQueue.h	/^class TaskQueue$/;"	c	namespace:ll
TcpConnection	TcpConnection.cc	/^TcpConnection::TcpConnection(int fd, EventLoop * loop)$/;"	f	class:ll::TcpConnection
TcpConnection	TcpConnection.h	/^class TcpConnection$/;"	c	namespace:ll
TcpServer	TcpServer.cc	/^TcpServer::TcpServer(const string & ip, unsigned short port)$/;"	f	class:ll::TcpServer
TcpServer	TcpServer.h	/^class TcpServer$/;"	c	namespace:ll
Thread	Thread.h	/^	Thread(ThreadCallback && cb,size_t tthreadNum)$/;"	f	class:ll::Thread
Thread	Thread.h	/^class Thread$/;"	c	namespace:ll
ThreadData	Thread.cc	/^    ThreadData(size_t num,ThreadCallback &&cb)$/;"	f	struct:ll::ThreadData
ThreadData	Thread.cc	/^struct ThreadData$/;"	s	namespace:ll	file:
Threadpool	Threadpool.cc	/^Threadpool::Threadpool(size_t threadNumber, size_t queSize)$/;"	f	class:ll::Threadpool
Threadpool	Threadpool.h	/^class Threadpool$/;"	c	namespace:ll
TimerThread	TimerThread.h	/^	TimerThread(int initialTime, int intervalTime,int thnum, TimerCallback && cb)$/;"	f	class:ll::TimerThread
TimerThread	TimerThread.h	/^class TimerThread$/;"	c	namespace:ll
Timerfd	Timerfd.cc	/^Timerfd::Timerfd(int initialTime, int intervalTime, TimerCallback && cb)$/;"	f	class:ll::Timerfd
Timerfd	Timerfd.h	/^class Timerfd$/;"	c	namespace:ll
WebPage	PageLibPreprocessor.cc	/^WebPage::WebPage(string &doc,$/;"	f	class:ll::WebPage
WebPage	PageLibPreprocessor.h	/^class WebPage$/;"	c	namespace:ll
WordFreqCompare	PageLibPreprocessor.cc	/^struct WordFreqCompare$/;"	s	namespace:ll	file:
WordQuery	WordQuery.cc	/^WordQuery::WordQuery(Configuration &conf)$/;"	f	class:ll::WordQuery
WordQuery	WordQuery.h	/^class WordQuery$/;"	c	namespace:ll
_H_REDIS_TOOLS_	RedisTool.h	2;"	d
__WD_ACCEPTOR_H__	Acceptor.h	8;"	d
__WD_CONDITION_H__	Condition.h	9;"	d
__WD_EVENTLOOP_H__	EventLoop.h	8;"	d
__WD_INETADDRESS_H__	InetAddress.h	8;"	d
__WD_MUTEXLOCK_H__	MutexLock.h	8;"	d
__WD_SOCKETIO_H__	SocketIO.h	8;"	d
__WD_SOCKET_H__	Socket.h	8;"	d
__WD_TASKQUEUE_H__	TaskQueue.h	8;"	d
__WD_TCPCONNECTION_H__	TcpConnection.h	8;"	d
__WD_TCPSERVER_H__	TcpServer.h	8;"	d
__WD_THREADPOOL_H__	Threadpool.h	8;"	d
_acceptor	EventLoop.h	/^	Acceptor & _acceptor;$/;"	m	class:ll::EventLoop
_acceptor	TcpServer.h	/^	Acceptor _acceptor;$/;"	m	class:ll::TcpServer
_addr	Acceptor.h	/^	InetAddress _addr;$/;"	m	class:ll::Acceptor
_addr	InetAddress.h	/^	struct sockaddr_in _addr;$/;"	m	class:ll::InetAddress	typeref:struct:ll::InetAddress::sockaddr_in
_base	WordQuery.cc	/^    vector<double> _base; \/\/基准向量$/;"	m	struct:ll::SimilarityCompare	file:
_cacheVec	LRUCache.h	/^    vector<LRUCache> _cacheVec;  \/\/缓存数量与线程保持一致,0位置存的是总缓存$/;"	m	class:ll::CacheManager
_cacheVec	temp/LRUCache.h	/^    vector<LRUCache> _cacheVec;  \/\/缓存数量与线程保持一致,0位置存的是总缓存$/;"	m	class:ll::CacheManager
_cachesManager	Threadpool.h	/^    CacheManager _cachesManager;$/;"	m	class:ll::Threadpool
_capacity	LRUCache.h	/^	int _capacity;  \/\/缓存大小$/;"	m	class:ll::LRUCache
_capacity	temp/LRUCache.h	/^	int _capacity;  \/\/缓存大小$/;"	m	class:ll::LRUCache
_cb	Thread.cc	/^    ThreadCallback _cb;$/;"	m	struct:ll::ThreadData	file:
_cb	Thread.h	/^	ThreadCallback _cb;$/;"	m	class:ll::Thread
_cb	Timerfd.h	/^	TimerCallback _cb;$/;"	m	class:ll::Timerfd
_cond	Condition.h	/^	pthread_cond_t _cond;$/;"	m	class:ll::Condition
_conf	DictProducer.h	/^    Configuration &_conf;$/;"	m	class:ll::DictProducer
_conf	PageLibPreprocessor.h	/^    Configuration &_conf;$/;"	m	class:ll::PageLibPreprocessor
_conf	WordQuery.h	/^    Configuration &_conf;$/;"	m	class:ll::WordQuery
_conf	temp/DictProducer.h	/^    Configuration &_conf;$/;"	m	class:ll::DictProducer
_configMap	Configuration.h	/^    map<string,string> _configMap;$/;"	m	class:ll::Configuration
_conn	testThread.cc	/^    TcpConnectionPtr _conn; \/\/具体链接$/;"	m	class:ll::myTask	file:
_conns	EventLoop.h	/^	map<int, TcpConnectionPtr> _conns;$/;"	m	class:ll::EventLoop
_dict	DictProducer.h	/^    map<string,int> _dict;   \/\/词典$/;"	m	class:ll::DictProducer
_dict	temp/DictProducer.h	/^    map<string,int> _dict;   \/\/词典$/;"	m	class:ll::DictProducer
_dir	temp/DictProducer.h	/^    string _dir;  \/\/语料库存放路径$/;"	m	class:ll::DictProducer
_doc	PageLibPreprocessor.h	/^    string _doc;    \/\/整篇文档，包含xml在内$/;"	m	class:ll::WebPage
_docContent	PageLibPreprocessor.h	/^    string _docContent; \/\/文档内容$/;"	m	class:ll::WebPage
_docId	PageLibPreprocessor.h	/^    int  _docId; \/\/文档id$/;"	m	class:ll::WebPage
_docTitle	PageLibPreprocessor.h	/^    string _docTitle;   \/\/文档标题$/;"	m	class:ll::WebPage
_docUrl	PageLibPreprocessor.h	/^    string _docUrl; \/\/文档URL$/;"	m	class:ll::WebPage
_efd	EventLoop.h	/^	int _efd;$/;"	m	class:ll::EventLoop
_eventList	EventLoop.h	/^	vector<struct epoll_event> _eventList;$/;"	m	class:ll::EventLoop
_eventfd	EventLoop.h	/^	int _eventfd;$/;"	m	class:ll::EventLoop
_fd	Socket.h	/^	int _fd;$/;"	m	class:ll::Socket
_fd	SocketIO.h	/^	int _fd;$/;"	m	class:ll::SocketIO
_fd	Timerfd.h	/^	int _fd;$/;"	m	class:ll::Timerfd
_filepath	Configuration.h	/^    string _filepath;$/;"	m	class:ll::Configuration
_flag	TaskQueue.h	/^	bool _flag;$/;"	m	class:ll::TaskQueue
_harhmap	LRUCache.h	/^    unordered_map<string,set<string>> _harhmap; \/\/存放缓存数据$/;"	m	class:ll::LRUCache
_harhmap	temp/LRUCache.h	/^    unordered_map<string,set<string>> _harhmap; \/\/存放缓存数据$/;"	m	class:ll::LRUCache
_idist	testThread.cc	/^    int *_idist;$/;"	m	struct:ll::MyResult	file:
_ifreq	testThread.cc	/^    int *_ifreq;$/;"	m	struct:ll::MyResult	file:
_index	DictProducer.h	/^    map<string,set<string>> _index;$/;"	m	class:ll::DictProducer
_index	temp/DictProducer.h	/^    map<string,set<string>> _index;$/;"	m	class:ll::DictProducer
_initialTime	Timerfd.h	/^	int _initialTime;$/;"	m	class:ll::Timerfd
_intervalTime	Timerfd.h	/^	int _intervalTime;$/;"	m	class:ll::Timerfd
_invertIndexTable	PageLibPreprocessor.h	/^    unordered_map<string, vector<pair<int, double>>> _invertIndexTable;   \/\/ 倒排索引表对象$/;"	m	class:ll::PageLibPreprocessor
_invertIndexTable	WordQuery.h	/^    unordered_map<string, set<pair<int, double>>> _invertIndexTable;   \/\/ 倒排索引表对象$/;"	m	class:ll::WordQuery
_isExit	Threadpool.h	/^	bool _isExit;$/;"	m	class:ll::Threadpool
_isLocking	MutexLock.h	/^	bool _isLocking;$/;"	m	class:ll::MutexLock
_isLooping	EventLoop.h	/^	bool _isLooping;$/;"	m	class:ll::EventLoop
_isRunning	Thread.h	/^	bool _isRunning;$/;"	m	class:ll::Thread
_isShutdwonWrite	TcpConnection.h	/^	bool _isShutdwonWrite;$/;"	m	class:ll::TcpConnection
_isStarted	Timerfd.h	/^	bool _isStarted;$/;"	m	class:ll::Timerfd
_jieba	PageLibPreprocessor.h	/^    CppJieba _jieba;$/;"	m	class:ll::PageLibPreprocessor
_jieba	SplitTool.h	/^        Jieba *_jieba;$/;"	m	class:ll::CppJieba
_jieba	WordQuery.h	/^    CppJieba _jieba;$/;"	m	class:ll::WordQuery
_keys	LRUCache.h	/^	unordered_map<string, list<string>::iterator> _keys; \/\/记录数据在list中的位置$/;"	m	class:ll::LRUCache
_keys	temp/LRUCache.h	/^	unordered_map<string, list<string>::iterator> _keys; \/\/记录数据在list中的位置$/;"	m	class:ll::LRUCache
_listensock	Acceptor.h	/^	Socket _listensock;$/;"	m	class:ll::Acceptor
_localAddr	TcpConnection.h	/^	InetAddress _localAddr;$/;"	m	class:ll::TcpConnection
_loop	TcpConnection.h	/^	EventLoop * _loop;$/;"	m	class:ll::TcpConnection
_loop	TcpServer.h	/^	EventLoop _loop;$/;"	m	class:ll::TcpServer
_msg	testThread.cc	/^    string _msg;$/;"	m	class:ll::myTask	file:
_mutex	Condition.h	/^	MutexLock & _mutex;$/;"	m	class:ll::Condition
_mutex	EventLoop.h	/^	MutexLock _mutex;$/;"	m	class:ll::EventLoop
_mutex	MutexLock.h	/^	MutexLock & _mutex;$/;"	m	class:ll::MutexLockGuard
_mutex	MutexLock.h	/^	pthread_mutex_t _mutex;$/;"	m	class:ll::MutexLock
_mutex	TaskQueue.h	/^	MutexLock _mutex;$/;"	m	class:ll::TaskQueue
_nodes	LRUCache.h	/^	list<string> _nodes; \/\/用以淘汰$/;"	m	class:ll::LRUCache
_nodes	temp/LRUCache.h	/^	list<string> _nodes; \/\/用以淘汰$/;"	m	class:ll::LRUCache
_notEmpty	TaskQueue.h	/^	Condition _notEmpty;$/;"	m	class:ll::TaskQueue
_notFull	TaskQueue.h	/^	Condition _notFull;$/;"	m	class:ll::TaskQueue
_num	Thread.cc	/^    size_t _num;$/;"	m	struct:ll::ThreadData	file:
_offsetLib	PageLibPreprocessor.h	/^    unordered_map<int, pair<int, int> >  _offsetLib;    \/\/ 网页偏移库对象$/;"	m	class:ll::PageLibPreprocessor
_offsetLib	WordQuery.h	/^    unordered_map<int, pair<int, int> >  _offsetLib;    \/\/ 网页偏移库对象$/;"	m	class:ll::WordQuery
_onClose	EventLoop.h	/^	TcpConnectionCallback _onClose;$/;"	m	class:ll::EventLoop
_onClose	TcpConnection.h	/^	TcpConnectionCallback _onClose;$/;"	m	class:ll::TcpConnection
_onConnection	EventLoop.h	/^	TcpConnectionCallback _onConnection;$/;"	m	class:ll::EventLoop
_onConnection	TcpConnection.h	/^	TcpConnectionCallback _onConnection;$/;"	m	class:ll::TcpConnection
_onMessage	EventLoop.h	/^	TcpConnectionCallback _onMessage;$/;"	m	class:ll::EventLoop
_onMessage	TcpConnection.h	/^	TcpConnectionCallback _onMessage;$/;"	m	class:ll::TcpConnection
_pageLib	PageLibPreprocessor.h	/^    vector<WebPage> _pageLib;  \/\/ 网页库的容器对象$/;"	m	class:ll::PageLibPreprocessor
_pageLib	WordQuery.h	/^    vector<WebPage> _pageLib;$/;"	m	class:ll::WordQuery
_peerAddr	TcpConnection.h	/^	InetAddress _peerAddr;$/;"	m	class:ll::TcpConnection
_pendingFunctors	EventLoop.h	/^	vector<Functor> _pendingFunctors;$/;"	m	class:ll::EventLoop
_pthid	Thread.h	/^	pthread_t _pthid;$/;"	m	class:ll::Thread
_que	TaskQueue.h	/^	queue<ElemType> _que;$/;"	m	class:ll::TaskQueue
_que	Threadpool.h	/^	TaskQueue _que;$/;"	m	class:ll::Threadpool
_queSize	Threadpool.h	/^	size_t _queSize;$/;"	m	class:ll::Threadpool
_server	testThread.cc	/^    TcpServer _server;$/;"	m	class:ll::EchoServer	file:
_sock	TcpConnection.h	/^	Socket _sock;$/;"	m	class:ll::TcpConnection
_socketIo	TcpConnection.h	/^	SocketIO _socketIo;$/;"	m	class:ll::TcpConnection
_splitTool	DictProducer.h	/^    SplitTool * _splitTool;  \/\/initrd.img分词工具$/;"	m	class:ll::DictProducer
_splitTool	temp/DictProducer.h	/^    SplitTool * _splitTool;  \/\/initrd.img分词工具$/;"	m	class:ll::DictProducer
_sz	TaskQueue.h	/^	size_t _sz; \/\/队列大小$/;"	m	class:ll::TaskQueue
_thread	TimerThread.h	/^	Thread _thread;$/;"	m	class:ll::TimerThread
_threadNum	Thread.h	/^    size_t _threadNum; \/\/线程编号$/;"	m	class:ll::Thread
_threadNumber	Threadpool.h	/^	size_t _threadNumber; $/;"	m	class:ll::Threadpool
_threadpool	testThread.cc	/^    Threadpool &_threadpool; \/\/线程池$/;"	m	class:ll::myTask	file:
_threadpool	testThread.cc	/^    Threadpool _threadpool;$/;"	m	class:ll::EchoServer	file:
_threads	Threadpool.h	/^	vector<unique_ptr<Thread>> _threads;$/;"	m	class:ll::Threadpool
_timer	TimerThread.h	/^	Timerfd _timer;$/;"	m	class:ll::TimerThread
_topWords	PageLibPreprocessor.h	/^    vector<string> _topWords;  \/\/词频最高的前20个词$/;"	m	class:ll::WebPage
_word	testThread.cc	/^    string _word;$/;"	m	struct:ll::MyResult	file:
_wordQue	testThread.cc	/^    WordQuery &_wordQue;\/\/ 用来查询$/;"	m	class:ll::myTask	file:
_wordQue	testThread.cc	/^    WordQuery *_wordQue;$/;"	m	class:ll::EchoServer	file:
_wordsMap	PageLibPreprocessor.h	/^    map<string,int> _wordsMap;  \/\/保存每篇文档的所有词语和词频，不包括停用词$/;"	m	class:ll::WebPage
accept	Acceptor.cc	/^int Acceptor::accept()$/;"	f	class:ll::Acceptor
addElement	LRUCache.cc	/^void LRUCache::addElement(string s)$/;"	f	class:ll::LRUCache
addElement	temp/LRUCache.cc	/^void LRUCache::addElement(string s)$/;"	f	class:ll::LRUCache
addEpollFdRead	EventLoop.cc	/^void EventLoop::addEpollFdRead(int fd)$/;"	f	class:ll::EventLoop
addTask	Threadpool.cc	/^void Threadpool::addTask(Task && task)$/;"	f	class:ll::Threadpool
bind	Acceptor.cc	/^void Acceptor::bind()$/;"	f	class:ll::Acceptor
buildInvertIndexTable	PageLibPreprocessor.cc	/^void PageLibPreprocessor::buildInvertIndexTable()$/;"	f	class:ll::PageLibPreprocessor
bulid_cn_dict	DictProducer.cc	/^void DictProducer::bulid_cn_dict()$/;"	f	class:ll::DictProducer
bulid_cn_dict	temp/DictProducer.cc	/^void DictProducer::bulid_cn_dict()$/;"	f	class:ll::DictProducer
bulid_index	DictProducer.cc	/^void DictProducer::bulid_index()$/;"	f	class:ll::DictProducer
bulid_index	temp/DictProducer.cc	/^void DictProducer::bulid_index()$/;"	f	class:ll::DictProducer
calcTopK	PageLibPreprocessor.cc	/^void WebPage::calcTopK(vector<string> &wordsVec,set<string> &stopWordList)$/;"	f	class:ll::WebPage
createEpollFd	EventLoop.cc	/^int EventLoop::createEpollFd()$/;"	f	class:ll::EventLoop
createEventFd	EventLoop.cc	/^int EventLoop::createEventFd()$/;"	f	class:ll::EventLoop
createJson	WordQuery.cc	/^string WordQuery::createJson(vector<int> & docIdVec, const vector<string> & queryWords)$/;"	f	class:ll::WordQuery
createTimerfd	Timerfd.cc	/^int Timerfd::createTimerfd()$/;"	f	class:ll::Timerfd
current_thread	Thread.h	/^namespace current_thread$/;"	n	namespace:ll
cutRedundantPages	PageLibPreprocessor.cc	/^void PageLibPreprocessor::cutRedundantPages()$/;"	f	class:ll::PageLibPreprocessor
delEpollFdRead	EventLoop.cc	/^void EventLoop::delEpollFdRead(int fd)$/;"	f	class:ll::EventLoop
doPendingFunctors	EventLoop.cc	/^void EventLoop::doPendingFunctors()$/;"	f	class:ll::EventLoop
doProcess	PageLibPreprocessor.cc	/^void PageLibPreprocessor::doProcess()$/;"	f	class:ll::PageLibPreprocessor
doQuery	WordQuery.cc	/^string WordQuery::doQuery(const string & str)$/;"	f	class:ll::WordQuery
empty	TaskQueue.cc	/^bool TaskQueue::empty() const$/;"	f	class:ll::TaskQueue
executeQuery	WordQuery.cc	/^bool WordQuery::executeQuery(const vector<string> & queryWords,$/;"	f	class:ll::WordQuery
fd	Acceptor.h	/^	int fd() const {	return _listensock.fd(); }$/;"	f	class:ll::Acceptor
fd	Socket.cc	/^int Socket::fd() const {	return _fd;	}$/;"	f	class:ll::Socket
full	TaskQueue.cc	/^bool TaskQueue::full() const$/;"	f	class:ll::TaskQueue
getCache	LRUCache.cc	/^LRUCache &CacheManager::getCache(size_t idx) \/\/获取某个缓存$/;"	f	class:ll::CacheManager
getCache	Threadpool.cc	/^LRUCache Threadpool::getCache(size_t num)$/;"	f	class:ll::Threadpool
getCache	temp/LRUCache.cc	/^LRUCache &CacheManager::getCache(size_t idx) \/\/获取某个缓存$/;"	f	class:ll::CacheManager
getCipin	DictProducer.cc	/^int DictProducer::getCipin(string str)$/;"	f	class:ll::DictProducer
getConfigMap	Configuration.h	/^    map<string,string> &getConfigMap()$/;"	f	class:ll::Configuration
getDoc	PageLibPreprocessor.h	/^    string getDoc() {return _doc;} \/\/获取文档$/;"	f	class:ll::WebPage
getDocId	PageLibPreprocessor.h	/^    int getDocId() { return _docId;  }  \/\/获取文档的docid$/;"	f	class:ll::WebPage
getIdct	DictProducer.cc	/^map<string,int> &DictProducer::getIdct()$/;"	f	class:ll::DictProducer
getInetAddressPtr	InetAddress.h	/^	struct sockaddr_in * getInetAddressPtr() {	return &_addr;	}$/;"	f	class:ll::InetAddress
getList	RedisTool.cc	/^vector<int> RedisTool::getList(string key)$/;"	f	class:ll::RedisTool
getLocalAddr	TcpConnection.cc	/^InetAddress TcpConnection::getLocalAddr(int fd)$/;"	f	class:ll::TcpConnection
getMutexLockPtr	MutexLock.h	/^	pthread_mutex_t * getMutexLockPtr() {	return &_mutex;	}$/;"	f	class:ll::MutexLock
getPeerAddr	TcpConnection.cc	/^InetAddress TcpConnection::getPeerAddr(int fd)$/;"	f	class:ll::TcpConnection
getQueryWordsWeightVector	WordQuery.cc	/^vector<double> WordQuery::getQueryWordsWeightVector(vector<string> & queryWords) \/\/计算查询词的权重值$/;"	f	class:ll::WordQuery
getRedisIP	RedisConfig.h	/^    std::string getRedisIP()$/;"	f	class:ll::RedisConfig
getRedisPort	RedisConfig.h	/^    int getRedisPort()$/;"	f	class:ll::RedisConfig
getStopWordList	Configuration.h	/^set<std::string> & getStopWordList()$/;"	f	class:ll::Configuration
getString	RedisTool.cc	/^string RedisTool::getString(string key)$/;"	f	class:ll::RedisTool
getSummary	PageLibPreprocessor.cc	/^string WebPage::getSummary(const vector<string> & queryWords)$/;"	f	class:ll::WebPage
getTask	Threadpool.cc	/^Task Threadpool::getTask()$/;"	f	class:ll::Threadpool
getTitle	PageLibPreprocessor.h	/^    string getTitle() {return _docTitle;}$/;"	f	class:ll::WebPage
getUrl	PageLibPreprocessor.h	/^    string getUrl() {return _docUrl;}$/;"	f	class:ll::WebPage
getWordsMap	PageLibPreprocessor.h	/^    map<string, int> & getWordsMap() {return _wordsMap;}    \/\/获取文档的词频统计map$/;"	f	class:ll::WebPage
getindex	DictProducer.h	/^    map<string,set<string>> &getindex()$/;"	f	class:ll::DictProducer
getindex	temp/DictProducer.h	/^    map<string,set<string>> &getindex()$/;"	f	class:ll::DictProducer
handleCloseCallback	TcpConnection.cc	/^void TcpConnection::handleCloseCallback()$/;"	f	class:ll::TcpConnection
handleConnectionCallback	TcpConnection.cc	/^void TcpConnection::handleConnectionCallback()$/;"	f	class:ll::TcpConnection
handleMessage	EventLoop.cc	/^void EventLoop::handleMessage(int fd)$/;"	f	class:ll::EventLoop
handleMessageCallback	TcpConnection.cc	/^void TcpConnection::handleMessageCallback()$/;"	f	class:ll::TcpConnection
handleNewConnection	EventLoop.cc	/^void EventLoop::handleNewConnection()$/;"	f	class:ll::EventLoop
handleRead	EventLoop.cc	/^void EventLoop::handleRead()$/;"	f	class:ll::EventLoop
handleRead	Timerfd.cc	/^void Timerfd::handleRead()$/;"	f	class:ll::Timerfd
index	LRUCache.h	/^		int index; \/\/在字典vector中的位置下标$/;"	m	struct:ll::LRUCache::CacheNode
index	temp/LRUCache.h	/^		int index; \/\/在字典vector中的位置下标$/;"	m	struct:ll::LRUCache::CacheNode
init	RedisTool.cc	/^void RedisTool::init()$/;"	f	class:ll::RedisTool
initCache	LRUCache.cc	/^void CacheManager::initCache(size_t cacheNum,string filename)$/;"	f	class:ll::CacheManager
initCache	temp/LRUCache.cc	/^void CacheManager::initCache(size_t cacheNum,string filename)$/;"	f	class:ll::CacheManager
ip	InetAddress.cc	/^string InetAddress::ip() const$/;"	f	class:ll::InetAddress
isConnectionClosed	EventLoop.cc	/^bool EventLoop::isConnectionClosed(int fd)$/;"	f	class:ll::EventLoop
join	Thread.cc	/^void Thread::join()$/;"	f	class:ll::Thread
lenth	nBtyte.cc	/^int lenth(const string str)$/;"	f	namespace:ll
lenth	temp/nBtyte.cc	/^int lenth(const string str)$/;"	f	namespace:ll
listen	Acceptor.cc	/^void Acceptor::listen()$/;"	f	class:ll::Acceptor
ll	Acceptor.cc	/^namespace ll$/;"	n	file:
ll	Acceptor.h	/^namespace ll$/;"	n
ll	Condition.cc	/^namespace ll$/;"	n	file:
ll	Condition.h	/^namespace ll$/;"	n
ll	Configuration.h	/^namespace ll$/;"	n
ll	DictProducer.cc	/^namespace ll$/;"	n	file:
ll	DictProducer.h	/^namespace ll$/;"	n
ll	EventLoop.cc	/^namespace ll$/;"	n	file:
ll	EventLoop.h	/^namespace ll$/;"	n
ll	InetAddress.cc	/^namespace ll$/;"	n	file:
ll	InetAddress.h	/^namespace ll$/;"	n
ll	LRUCache.cc	/^namespace ll$/;"	n	file:
ll	LRUCache.h	/^namespace ll$/;"	n
ll	MutexLock.cc	/^namespace ll$/;"	n	file:
ll	MutexLock.h	/^namespace ll$/;"	n
ll	Noncopyable.h	/^namespace ll$/;"	n
ll	PageLibPreprocessor.cc	/^namespace ll$/;"	n	file:
ll	PageLibPreprocessor.h	/^namespace ll$/;"	n
ll	RedisConfig.h	/^namespace ll$/;"	n
ll	RedisTool.cc	/^namespace ll$/;"	n	file:
ll	RedisTool.h	/^namespace ll$/;"	n
ll	Socket.cc	/^namespace ll$/;"	n	file:
ll	Socket.h	/^namespace ll$/;"	n
ll	SocketIO.cc	/^namespace ll$/;"	n	file:
ll	SocketIO.h	/^namespace ll$/;"	n
ll	SplitTool.h	/^namespace ll$/;"	n
ll	TaskQueue.cc	/^namespace ll$/;"	n	file:
ll	TaskQueue.h	/^namespace ll$/;"	n
ll	TcpConnection.cc	/^namespace ll$/;"	n	file:
ll	TcpConnection.h	/^namespace ll$/;"	n
ll	TcpServer.cc	/^namespace ll$/;"	n	file:
ll	TcpServer.h	/^namespace ll$/;"	n
ll	Thread.cc	/^namespace ll$/;"	n	file:
ll	Thread.h	/^namespace ll$/;"	n
ll	Threadpool.cc	/^namespace ll $/;"	n	file:
ll	Threadpool.h	/^namespace ll$/;"	n
ll	TimerThread.h	/^namespace ll$/;"	n
ll	Timerfd.cc	/^namespace ll$/;"	n	file:
ll	Timerfd.h	/^namespace ll$/;"	n
ll	WordQuery.cc	/^namespace ll$/;"	n	file:
ll	WordQuery.h	/^namespace ll$/;"	n
ll	nBtyte.cc	/^namespace ll$/;"	n	file:
ll	nBtyte.h	/^namespace ll$/;"	n
ll	temp/DictProducer.cc	/^namespace ll$/;"	n	file:
ll	temp/DictProducer.h	/^namespace ll$/;"	n
ll	temp/LRUCache.cc	/^namespace ll$/;"	n	file:
ll	temp/LRUCache.h	/^namespace ll$/;"	n
ll	temp/nBtyte.cc	/^namespace ll$/;"	n	file:
ll	temp/nBtyte.h	/^namespace ll$/;"	n
ll	testThread.cc	/^namespace ll$/;"	n	file:
loadLibrary	WordQuery.cc	/^void WordQuery::loadLibrary()$/;"	f	class:ll::WordQuery
lock	MutexLock.cc	/^void MutexLock::lock()$/;"	f	class:ll::MutexLock
loop	EventLoop.cc	/^void EventLoop::loop()$/;"	f	class:ll::EventLoop
m_config	RedisTool.h	/^    RedisConfig m_config;$/;"	m	class:ll::RedisTool
m_redis	RedisTool.h	/^    redisContext *m_redis;$/;"	m	class:ll::RedisTool
main	server.c	/^int main(int argc, const char *argv[])$/;"	f
main	temp/testCache.cc	/^int main()$/;"	f
main	testThread.cc	/^int main(void)$/;"	f
managerFunc	Threadpool.cc	/^void Threadpool::managerFunc()$/;"	f	class:ll::Threadpool
myResult	testThread.cc	/^}myResult;$/;"	t	namespace:ll	typeref:struct:ll::MyResult	file:
myTask	testThread.cc	/^    myTask(const string & msg,$/;"	f	class:ll::myTask
myTask	testThread.cc	/^class myTask$/;"	c	namespace:ll	file:
nByteCode	nBtyte.cc	/^size_t nByteCode(const char ch)$/;"	f	namespace:ll
nByteCode	temp/nBtyte.cc	/^size_t nByteCode(const char ch)$/;"	f	namespace:ll
notify	Condition.cc	/^void Condition::notify()$/;"	f	class:ll::Condition
notifyAll	Condition.cc	/^void Condition::notifyAll()$/;"	f	class:ll::Condition
onClose	testThread.cc	/^void EchoServer::onClose(const ll::TcpConnectionPtr & conn)$/;"	f	class:ll::EchoServer
onConnection	testThread.cc	/^void EchoServer::onConnection(const ll::TcpConnectionPtr & conn)$/;"	f	class:ll::EchoServer
onMessage	testThread.cc	/^void EchoServer::onMessage(const ll::TcpConnectionPtr & conn)$/;"	f	class:ll::EchoServer
operator ()	PageLibPreprocessor.cc	/^    bool operator()(const pair<string, int> & left, const pair<string, int> & right)$/;"	f	struct:ll::WordFreqCompare
operator ()	WordQuery.cc	/^    bool operator()(const pair<int, vector<double> > & lhs, $/;"	f	struct:ll::SimilarityCompare
operator <	PageLibPreprocessor.cc	/^bool operator < (const WebPage & lhs, const WebPage & rhs)$/;"	f	namespace:ll
operator ==	PageLibPreprocessor.cc	/^bool operator == (const WebPage & lhs, const WebPage & rhs) $/;"	f	namespace:ll
periodicUpdateCaches	LRUCache.cc	/^void CacheManager::periodicUpdateCaches()  \/\/定时更新缓存中数据$/;"	f	class:ll::CacheManager
periodicUpdateCaches	temp/LRUCache.cc	/^void CacheManager::periodicUpdateCaches()  \/\/定时更新缓存中数据$/;"	f	class:ll::CacheManager
pop	TaskQueue.cc	/^ElemType TaskQueue::pop()$/;"	f	class:ll::TaskQueue
port	InetAddress.cc	/^unsigned short InetAddress::port() const$/;"	f	class:ll::InetAddress
process	testThread.cc	/^    void process()$/;"	f	class:ll::myTask
process	testThread.cc	/^void EchoServer::process()$/;"	f	class:ll::EchoServer
processDoc	PageLibPreprocessor.cc	/^void WebPage::processDoc(const string &doc,$/;"	f	class:ll::WebPage
push	TaskQueue.cc	/^void TaskQueue::push(ElemType elem)$/;"	f	class:ll::TaskQueue
readFromFile	LRUCache.cc	/^void LRUCache::readFromFile(const string &filename)$/;"	f	class:ll::LRUCache
readFromFile	temp/LRUCache.cc	/^void LRUCache::readFromFile(const string &filename)$/;"	f	class:ll::LRUCache
readInfoFromFile	PageLibPreprocessor.cc	/^void PageLibPreprocessor::readInfoFromFile()$/;"	f	class:ll::PageLibPreprocessor
readline	SocketIO.cc	/^int SocketIO::readline(char * buff, int maxlen)$/;"	f	class:ll::SocketIO
readn	SocketIO.cc	/^int SocketIO::readn(char * buff, int len)$/;"	f	class:ll::SocketIO
readstr	SocketIO.cc	/^int SocketIO::readstr(char *buff,int len)$/;"	f	class:ll::SocketIO
ready	Acceptor.cc	/^void Acceptor::ready()$/;"	f	class:ll::Acceptor
receive	TcpConnection.cc	/^string TcpConnection::receive()$/;"	f	class:ll::TcpConnection
recvPeek	SocketIO.cc	/^int SocketIO::recvPeek(char * buff, int len)$/;"	f	class:ll::SocketIO
returnNoAnswer	WordQuery.cc	/^string WordQuery::returnNoAnswer()$/;"	f	class:ll::WordQuery
runInLoop	EventLoop.cc	/^void EventLoop::runInLoop(Functor && cb)$/;"	f	class:ll::EventLoop
runInThread	Thread.cc	/^    void runInThread()$/;"	f	struct:ll::ThreadData
send	TcpConnection.cc	/^void TcpConnection::send(const string & msg)$/;"	f	class:ll::TcpConnection
sendInLoop	TcpConnection.cc	/^void TcpConnection::sendInLoop(const string & msg)$/;"	f	class:ll::TcpConnection
setCloseCallback	EventLoop.h	/^	void setCloseCallback(TcpConnectionCallback && cb)$/;"	f	class:ll::EventLoop
setCloseCallback	TcpConnection.cc	/^void TcpConnection::setCloseCallback(const TcpConnectionCallback & cb)$/;"	f	class:ll::TcpConnection
setCloseCallback	TcpServer.cc	/^void TcpServer::setCloseCallback(TcpConnectionCallback && cb)$/;"	f	class:ll::TcpServer
setConnectionCallback	EventLoop.h	/^	void setConnectionCallback(TcpConnectionCallback && cb)$/;"	f	class:ll::EventLoop
setConnectionCallback	TcpConnection.cc	/^void TcpConnection::setConnectionCallback(const TcpConnectionCallback & cb)$/;"	f	class:ll::TcpConnection
setConnectionCallback	TcpServer.cc	/^void TcpServer::setConnectionCallback(TcpConnectionCallback && cb)$/;"	f	class:ll::TcpServer
setList	RedisTool.cc	/^int RedisTool::setList(string key,vector<int> value)$/;"	f	class:ll::RedisTool
setMessageCallback	EventLoop.h	/^	void setMessageCallback(TcpConnectionCallback && cb)$/;"	f	class:ll::EventLoop
setMessageCallback	TcpConnection.cc	/^void TcpConnection::setMessageCallback(const TcpConnectionCallback & cb)$/;"	f	class:ll::TcpConnection
setMessageCallback	TcpServer.cc	/^void TcpServer::setMessageCallback(TcpConnectionCallback && cb)$/;"	f	class:ll::TcpServer
setReuseAddr	Acceptor.cc	/^void Acceptor::setReuseAddr(bool on)$/;"	f	class:ll::Acceptor
setReusePort	Acceptor.cc	/^void Acceptor::setReusePort(bool on)$/;"	f	class:ll::Acceptor
setString	RedisTool.cc	/^int RedisTool::setString(string key, string value)$/;"	f	class:ll::RedisTool
setTimerfd	Timerfd.cc	/^void Timerfd::setTimerfd(int initialTime, int intervalTime)$/;"	f	class:ll::Timerfd
setdocId	PageLibPreprocessor.cc	/^void WebPage::setdocId(int id)$/;"	f	class:ll::WebPage
showCache	LRUCache.cc	/^void LRUCache::showCache()$/;"	f	class:ll::LRUCache
showCache	temp/LRUCache.cc	/^void LRUCache::showCache()$/;"	f	class:ll::LRUCache
shutdown	TcpConnection.cc	/^void TcpConnection::shutdown()$/;"	f	class:ll::TcpConnection
shutdownWrite	Socket.cc	/^void Socket::shutdownWrite()$/;"	f	class:ll::Socket
start	TcpServer.cc	/^void TcpServer::start()$/;"	f	class:ll::TcpServer
start	Thread.cc	/^void Thread::start()$/;"	f	class:ll::Thread
start	Threadpool.cc	/^void Threadpool::start()$/;"	f	class:ll::Threadpool
start	TimerThread.h	/^	void start()$/;"	f	class:ll::TimerThread
start	Timerfd.cc	/^void Timerfd::start()$/;"	f	class:ll::Timerfd
start	testThread.cc	/^void EchoServer::start()$/;"	f	class:ll::EchoServer
stop	Threadpool.cc	/^void Threadpool::stop()$/;"	f	class:ll::Threadpool
stop	TimerThread.h	/^	void stop()$/;"	f	class:ll::TimerThread
stop	Timerfd.cc	/^void Timerfd::stop()$/;"	f	class:ll::Timerfd
stop	testThread.cc	/^void EchoServer::stop()$/;"	f	class:ll::EchoServer
stopWordList_	Configuration.h	/^    set<std::string> stopWordList_;$/;"	m	class:ll::Configuration
storeOnDisk	PageLibPreprocessor.cc	/^void PageLibPreprocessor::storeOnDisk()$/;"	f	class:ll::PageLibPreprocessor
store_dict	DictProducer.cc	/^void DictProducer::store_dict()$/;"	f	class:ll::DictProducer
store_dict	temp/DictProducer.cc	/^void DictProducer::store_dict()$/;"	f	class:ll::DictProducer
store_index	DictProducer.cc	/^void DictProducer::store_index()$/;"	f	class:ll::DictProducer
store_index	temp/DictProducer.cc	/^void DictProducer::store_index()$/;"	f	class:ll::DictProducer
str	LRUCache.h	/^        string str; \/\/单词$/;"	m	struct:ll::LRUCache::CacheNode
str	temp/LRUCache.h	/^        string str; \/\/单词$/;"	m	struct:ll::LRUCache::CacheNode
testfunc	Threadpool.cc	/^void testfunc()$/;"	f	namespace:ll
threadFunc	Threadpool.cc	/^void Threadpool::threadFunc()$/;"	f	class:ll::Threadpool
threadNum	Thread.cc	/^__thread size_t current_thread::threadNum = 0;$/;"	m	class:ll::current_thread	file:
threadfunc	Thread.cc	/^void * Thread::threadfunc(void * arg)$/;"	f	class:ll::Thread
threadnum	Thread.h	21;"	d
toString	TcpConnection.cc	/^string TcpConnection::toString() const$/;"	f	class:ll::TcpConnection
tryGet	LRUCache.cc	/^set<string> LRUCache::tryGet(string s) \/\/尝试在cache中找单词，如果找到返回在字典中位置，如果没找到$/;"	f	class:ll::LRUCache
tryGet	temp/LRUCache.cc	/^set<string> *LRUCache::tryGet(string s) \/\/尝试在cache中找单词，如果找到返回在字典中位置，如果没找到$/;"	f	class:ll::LRUCache
unlock	MutexLock.cc	/^void MutexLock::unlock()$/;"	f	class:ll::MutexLock
unloop	EventLoop.cc	/^void EventLoop::unloop()$/;"	f	class:ll::EventLoop
update	LRUCache.cc	/^void LRUCache::update(const LRUCache & rhs)  \/\/更新缓存数据$/;"	f	class:ll::LRUCache
update	temp/LRUCache.cc	/^void LRUCache::update(const LRUCache & rhs)  \/\/更新缓存数据$/;"	f	class:ll::LRUCache
wait	Condition.cc	/^void Condition::wait()$/;"	f	class:ll::Condition
waitEpollFd	EventLoop.cc	/^void EventLoop::waitEpollFd()$/;"	f	class:ll::EventLoop
wakeup	EventLoop.cc	/^void EventLoop::wakeup()$/;"	f	class:ll::EventLoop
wakeup	TaskQueue.cc	/^void TaskQueue::wakeup()$/;"	f	class:ll::TaskQueue
writeToFile	LRUCache.cc	/^void LRUCache::writeToFile(const string & filename)$/;"	f	class:ll::LRUCache
writeToFile	temp/LRUCache.cc	/^void LRUCache::writeToFile(const string & filename)$/;"	f	class:ll::LRUCache
writen	SocketIO.cc	/^int SocketIO::writen(const char * buff, int len)$/;"	f	class:ll::SocketIO
~Condition	Condition.cc	/^Condition::~Condition()$/;"	f	class:ll::Condition
~Configuration	Configuration.h	/^    ~Configuration() {}$/;"	f	class:ll::Configuration
~CppJieba	SplitTool.h	/^    ~CppJieba() {}$/;"	f	class:ll::CppJieba
~DictProducer	DictProducer.h	/^    ~DictProducer() {}$/;"	f	class:ll::DictProducer
~DictProducer	temp/DictProducer.h	/^    ~DictProducer() {}$/;"	f	class:ll::DictProducer
~MutexLock	MutexLock.cc	/^MutexLock::~MutexLock()$/;"	f	class:ll::MutexLock
~MutexLockGuard	MutexLock.h	/^	~MutexLockGuard()$/;"	f	class:ll::MutexLockGuard
~Noncopyable	Noncopyable.h	/^	~Noncopyable() {}$/;"	f	class:ll::Noncopyable
~PageLibPreprocessor	PageLibPreprocessor.h	/^    ~PageLibPreprocessor() {}$/;"	f	class:ll::PageLibPreprocessor
~RedisConfig	RedisConfig.h	/^    ~RedisConfig() {}$/;"	f	class:ll::RedisConfig
~RedisTool	RedisTool.cc	/^RedisTool::~RedisTool()$/;"	f	class:ll::RedisTool
~Socket	Socket.cc	/^Socket::~Socket()$/;"	f	class:ll::Socket
~SplitTool	SplitTool.h	/^    ~SplitTool() {}$/;"	f	class:ll::SplitTool
~TcpConnection	TcpConnection.cc	/^TcpConnection::~TcpConnection()$/;"	f	class:ll::TcpConnection
~Thread	Thread.cc	/^Thread::~Thread()$/;"	f	class:ll::Thread
~ThreadData	Thread.cc	/^    ~ThreadData() $/;"	f	struct:ll::ThreadData
~WordQuery	WordQuery.h	/^    ~WordQuery() {}$/;"	f	class:ll::WordQuery
