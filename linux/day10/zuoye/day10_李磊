#include <func.h>
void Handler(int signum)
{
    time_t now=time(NULL);
    printf("%s\n",ctime(&now));   //记住这里要有取地址符
}
int main(int argc,char* argv[])
{
   signal(SIGPROF,Handler);  //真是计时器发的是SIGALRM信号
   Handler(0);
   struct itimerval tt;
   bzero(&tt,sizeof(tt));
   tt.it_value.tv_sec=3;
   tt.it_interval.tv_sec=2;
   int ret=setitimer(ITIMER_PROF,&tt,NULL);
   ERROR_CHECK(ret,-1,"setitimer");
   while(1);
}

#include <func.h>
void Handler(int signum)
{
    time_t now=time(NULL);
    printf("%s\n",ctime(&now));   //记住这里要有取地址符
}
int main(int argc,char* argv[])
{
   signal(SIGALRM,Handler);  //真是计时器发的是SIGALRM信号
   Handler(0);
   struct itimerval tt;
   bzero(&tt,sizeof(tt));
   tt.it_value.tv_sec=3;
   tt.it_interval.tv_sec=2;
   int ret=setitimer(ITIMER_REAL,&tt,NULL);
   ERROR_CHECK(ret,-1,"setitimer");
   while(1);
}

#include <func.h>
void Newhandler(int signum,siginfo_t *pInfo,void *pReserved)
{
    printf("%d id coming\n",signum);
    sleep(2);
    printf("%d id ending\n",signum);
}
int main(int argc,char* argv[])
{
    int ret;
    struct sigaction act;
    bzero(&act,sizeof(act));  //结构体清零
    act.sa_flags=SA_SIGINFO|SA_NODEFER;  //打开新处理函数
    act.sa_sigaction=Newhandler; //设置新处理函数
    ret=sigaction(SIGINT,&act,NULL);
    ERROR_CHECK(ret,-1,"sigaction");
    ret=sigaction(SIGQUIT,&act,NULL);
    ERROR_CHECK(ret,-1,"sigaction");
    while(1);
}

#include <func.h>
void Newhandler(int signum,siginfo_t *pInfo,void *pReserved)
{
    printf("%d id coming\n",signum);
    sleep(5);
    sigset_t pend;
    sigpending(&pend);
    if(sigismember(&pend,SIGQUIT))
    {
        printf("%d is pending\n",SIGQUIT);
    }else{
        printf("%d is not pending\n",SIGQUIT);
    }
    printf("%d id ending\n",signum);
}
int main(int argc,char* argv[])
{
    int ret;
    struct sigaction act;
    bzero(&act,sizeof(act));  //结构体清零
    act.sa_flags=SA_SIGINFO|SA_NODEFER;  //打开新处理函数
    act.sa_sigaction=Newhandler; //设置新处理函数
    sigemptyset(&act.sa_mask);
    sigaddset(&act.sa_mask,SIGQUIT); //设置阻塞信号
    ret=sigaction(SIGINT,&act,NULL);
    ERROR_CHECK(ret,-1,"sigaction");
    ret=sigaction(SIGQUIT,&act,NULL);
    ERROR_CHECK(ret,-1,"sigaction");
    while(1);
}

#include <func.h>
void Handler(int signum)
{
    printf("%d is coming\n",signum);
    sleep(3);
    printf("%d is ending\n",signum);
}
int main(int argc,char* argv[])
{
    signal(SIGINT,Handler);
    while(1);
}

#include <func.h>

int main(int argc,char* argv[])
{
   sigset_t sigset;
   sigemptyset(&sigset);
   sigaddset(&sigset,SIGINT);
   sigprocmask(SIG_BLOCK,&sigset,NULL);
   sleep(3);
   sigset_t pend;
   sigpending(&pend);
   if(sigismember(&pend,SIGINT))
   {
       printf("%d is pending\n",SIGINT);
   }else{
       printf("%d is not pending\n",SIGINT);
   }
   sigprocmask(SIG_UNBLOCK,&sigset,NULL);
   while(1);
   return 0;
}

